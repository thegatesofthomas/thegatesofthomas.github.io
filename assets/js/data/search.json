[ { "title": "Malware Analysis - Redline Stealer", "url": "/posts/Redline/", "categories": "MalwareAnalysis", "tags": "Malware, Net, Redline", "date": "2023-09-27 11:30:00 -0400", "snippet": "IntroductionToday I will be analyzing the very well known malware known as Redline Stealer. This malware is known for harvesting saved credentials, credit card info and other information about a host. This malware can typically upload and download files and will periodically send information back to a C2 domain. It can often be spotted as a MaaS (Malware as a service) in darkweb forums.Tools Used Detect-It-Easy NetReactorS Slayer inetsim wireshark pestudio procmon dnspy de4dot CyberChefLink to Sample:https://bazaar.abuse.ch/sample/8a839a1497379639e18a64b3f69f8f1a5d70341a666c91d5a13d24fecd05799f/IOCs (defanged)Hashes-8a839a1497379639e18a64b3f69f8f1a5d70341a666c91d5a13d24fecd05799f (1st Payload)a7c1c1bb1cb6996be53907169a49b1b6d7c34a6dbb99c47538ce781e844d00a9 (2nd Payload exe)5c03d43bf03feb867d7738b2697d9d44fe09fc2d97e681559f09cfa998ec0d77 (2nd Payload DLL)IPs-194[.]180[.]49[.]211URLs-hxxp[://]194[.]180[.]49[.]211/D/fweb[.]txthxxp[://]194[.]180[.]49[.]211/D/DLLL[.]txt Payload 1 Deobfuscation Starting out with our first payload we can load it into pestudio we can observe multiple indications that this is a .NET Binary. This is good as this means we can use tools such as DNSpy to decompile this binary.Further reviewing the binary we can see that most of the raw sizes and virtual sizes are similar except in the .data section which indicates some packing may be present.Skipping somewhat ahead when loaded into dnspy it can be seen that almost nothing shows up which supports this is most likely packed.Firing up Detect-It-Easy we can observe that this binary contains the protector “.NET Reactor”.After a little research we can find that this packer is “slayed” easily by a tool called “NetReactorS Slayer” which is lucky for us as the FlareVM suite of tools comes with this tool preloaded and has a nifty little GUI to compliment it.After running NETSlayer we can see this binary is now readable and we can finally begin our static analysis.As a final clean up we are going to run this through de4dot.exe just to clean up any loose ends.Basic Static Analysis Running the binary back into pestudio we can observe a suspicious compiler stamp dated October 22nd, 2077.Moving on to the imports we can see many Web related API calls being made.We also can see imports for Base64 encoding which indicates this encodes some sort of data.Finally reaching the strings we can see more indicators of HTTP web requests and Base64 Encoding/Decoding.Scrolling down further we can find two very interesting strings for URLs which indicates there is a second payload or even a C2 server.For fun I also ran this binary through floss because it picks out and decodes some strings more effectively than other tools. Some other of notable strings are related to querying file locations Basic Dynamic Analysis For my dynamic analysis I used inetsim and wireshark running on a remnux host on the same network to catch any DNS requests being made. I detonated the sample and recorded. First we will run this binary without inetsim running to see what it does. Nothing unusual occurred and the binary did not not react besides showing an error.After this we run inetsim and redetonate the sample.We don’t observe a whole lot besides TLS which only tells us that this is utilizing TLS to mask its connections. The same activity was still observed with inetsim off and on so it most likely doesnt check for internet access.Moving on to Procmon we run this without inetsim active again. No network activity is observed though it can be seen accessing dlls such as dhcpsvc6.dll and dnsapi.dll. Running the binary with inetsim active reveals nothing different. Further reviewing the registry activity shows the process querying the Internet Settings.Examining the child processes by setting the sample’s PID to parent PID shows multiple network connections spawned from WerFault.exe but WerFault is used for error reporting so this could just be typical WerFault activity.Next it can be seen that WerFault can be seen setting the Image File Executions to make the program run on start. This is a common tactic to maintain persistence for malware so this will run whenever the host starts up.Advanced Static Analysis Jumping into the Advanced Static we throw our cleaned sample in and begin to read through it. We find our main method which gives us a lot of information.We can see that this binary uses TLS to make a GET request to the URL hxxp[://]194[.]180[.]49[.]211/D/fweb[.]txt and saves it to the diretory where the program Caspol.exe is located. Caspol is the Code Access Security (CAS) Policy tool (Caspol.exe) enables users and administrators to modify security policy for the machine. This is most likely grabs another payload which is encoded into Base64. Another payload is also loaded from the URL hxxp[://]194[.]180[.]49[.]211/D/DLLL[.]txt which is most likely a DLL. Putting both of these URLs into URLscan.io pulls back large Base64 encoded strings which is our next payload. Conducting OSINT on the IP shows this is hosted with DDNS which is used for remote access with Dynamic DNS.Further diving in we see one other part of this program which relates the Image File Execution.Advanced Dynamic Analysis Now that we have analyzed basically all of the first payload statically we can debug this program to see exactly how it runs. Lucky for us DNspy has its own built in debugger.As we begin to debug the first thing this program does is reach out to this domain.Sadly it seems even with our trusty inetsim cannot fool this program but lucky for us we already got the next payloads on our own. Sadly I am not proficient enough with a debugger to get around this but we can see the program in is entirety so this all that matters.Just to reiterate the way we got this payload what I did was get the URLs from the first payload and I used URLScan.io to grab the next stage of the payload as seen in the screenshots below Payload 2 Deobfuscation We can see in the first payload that this is pulled down and converted from Base64 so we can easily run this through Cyberchef.When decoded we can see that the resulting output has a file header of MZ which is associated with DOS executables. As a result we can export this as a .exe file.Next we have our supposed DLL download from “hxxp[://]194[.]180[.]49[.]211/D/DLLL[.]txt”.The file contains the same file header but judging by the name of the txt file it would be safe to assume that this is a dll instead of a exe so we will export it as such. Finally we will run these through de4dot just incase even though these payloads dont seem to be obfuscated very well.Basic Static Analysis Jumping into it we are going to throw our exe file into pestudio we can see our first interesting clues on the functionality of this binary within the imports.We can see lots of registry activity which means this could maintain persistence or query keys. Additionally we see Credential Cache which is definitely important as this is redline stealer and that would be the golden goose for this malware. Other imports such as JavaScript Serializer is interesting as this may be a way for this malware to communicate with its C2 server. Finally we can see SMTP and Mail Address which is used for emails. Its unclear at this point if this is stealing email credentials or uses this as exfiltration. As for strings I am going to use Floss again.The only new information I could find was more strings relating to passwords.Next we are going to analyze the DLL that we pulled down. Yeeting this into PEStudio shows this was compiled in 2082 which is obviously impossible.Moving onto the imports we can see some interesting imports such as login screen and we can see mentions of the Better module which we saw being referenced in the first payload.Other strange function names can be spotted which when put through google translate seems to be turkish.Within the .NET resources we can see that the namespace holds the name Better.dll.Finally putting the DLL through floss we can see more indications of this attempting to setup a login screen which is unclear why it has this. My theory with this is that this is similar to the same technique that AgentTesla uses and packages itself legit functions and has its real payload hidden throughout. This is supported with the fact that when you put these binaries through VirusTotal they appear as AgentTesla. No other strange strings can be observed.Basic Dynamic Analysis Network analysis still remains difficult as this binary utilizes TLS to make network requests which could be possible to analyze I just am not advanced enough yet or have the proper toolset to. Otherwise we are can continue with Procmon.First thing we see is the binary attempting to maintain persistence within the Image File Execution.Other Registry actions that can be seen are querying Outlook, Foxmail, WinSCP, WinVNC4, TightVNC and COREFTP.Moving on to the file operations we can see this binary querying various browser credential storage directories which is typical of Redline Stealer.Advanced Static Analysis Next we will be using Dnspy to analyze both the EXE and DLL. Putting our binary in DNSpy shows we have an entry point. The first thing this binary does is create a TLS connection. Trespassing the binary we can see that this binary grabs System Informationother functions we can see are querying modules and windows hooksIt is highly probable that this binary is capable of keylogging as functions such as the one below.Next we find a function where we can see a function that is sending mail which make it highly likely this is how this binary exfiltrates data.Delving further into the binary we can see functions for querying specific folders which is most likely how this binary finds the directories where passwords are stored.The way this malware works seems to mainly rely on a string builder and just queries all of its set file paths and just adds them to an array till its done encodes it in base64 and then sends it out through email.Next we are going to put our DLL into DNSpy does not reveal much but it seems most of the functions are most likely related to process injection or hollowing as many of the functions are finding process IDs, byte streams, finding file locations, and manipulating arrays.Advanced Dynamic Analysis Time for the fun part of malware analysis which is debugging. Our favorite tool Dnspy comes with a debugger so no x32dbg today. The way we are achieving this is by opening the DLL in dnspy and then loading the exe as our executable.When this program starts up the first thing it does is check for a network connection and then figures out where its being launched as well as the user. The program then locates the Roaming folder.Next it seems to looks for invalid paths and seems to want to persist in Roaming.Finally it can be seen that this malware queries all of the password stores on this host from numerous mail, RDP and browser softwares.This seems to be the extent of this malware and doesn’t seem to do much else. Its capabilities seem to be just stealing credentials hence the name Redline Stealer. The way this malware works is that it is launched by a loader and uses WerFault to pull down its next payload from an IP in which it then loads the core of Redline Stealer which then queries system information and password stores located on the host. It then grabs all of these stores and stores them into an array which when sends them as an email attachment." }, { "title": "PiHole", "url": "/posts/PiHole/", "categories": "Networking", "tags": "PiHole, Lab", "date": "2023-04-27 12:16:00 -0400", "snippet": "Raspberry PiHoleHello! This article is gonna be about my experience with PiHole. I made this as a gift for a friend who was tired of ads on their network. I decided to paint the case for this in the theme of Garfield because my friends really like garfield and I thought it would be funny. For anyone who doesnt know what a PiHole is, it basically is a personal DNS server. DNS is a protocol used for converting domains such as “google.com” or “youtube.com” into IP addresses as a way of mapping out the internet as memorizising IP addresses would be a nuisance for the average person. A PiHole can also be used as a DHCP server which is used for assign IP addresses to your device on a network.SetupThe setup for the PiHole is super robust and has a very nice installer. Even a very non technically inclined person could figure out this menu as the defaults will most likely work with your network. One thing I ran into was setting the PiHole to have a static IP address was that the installer will do it for you but multiple forum posts and installation guides say you have to do this manually. This confused the installation a bit but overall it was pretty easy. The worst part was going into my friend’s router as this setup is tailored to each router. This is something you have to figure out with a bit of research by finding the make and model of your router.ExperienceI set this device as a DNS/DHCP server for my friend’s network and when it was set up like this the PiHole’s performance was a bit underwhelming. The main reason my friend wanted this was to block YouTube ads on their Roku device. It is not very effective at blocking YouTube ads as they would still play every so often. This was still a vast improvement compared to before but it would be nice if it was 100% effective. One other issue I ran into is that if this device goes offline you have to login to it and make sure it starts up again correctly. If I was setting this up for myself this wouldnt be a problem but setting this up for a friend who is not as technically inclined it’s not very practical. As a result I tried to make this a DNS server only so that if the PiHole failed it would fallback to the ISP’s DNS servers. After some research it seems this is not possible and many forums suggest running two PiHoles which is not a good option considering the price of Raspberry Pis nowadays. As a result I decided I didnt want the Pi failing and then my friend being without Internet because they didnt know how to restart it but none the less this project was still fun to make and gave me some good networking experience." }, { "title": "Practical Malware Analysis Lab 3 + 5", "url": "/posts/Labs5/", "categories": "PracticalMalwareAnalysis", "tags": "Malware, Lab, PracticalMalwareAnalysis", "date": "2023-02-12 11:16:00 -0500", "snippet": "Practical Malware Analysis LabsWhere have I been?Hello, Its been a while. I have been working on things I promise. I have put two new labs up and I will have a seperate set of C projects.Lab 3 WriteupLab 5 Writeup" }, { "title": "C Projects", "url": "/posts/CProjects/", "categories": "Programming", "tags": "Programming, C, Projects", "date": "2023-02-12 11:16:00 -0500", "snippet": "C ProjectsHere is a list of the C projects I have been working onC Projects" }, { "title": "Havoc C2 Framework Demo", "url": "/posts/Havoc/", "categories": "Demo", "tags": "Demo, C2, Framework", "date": "2022-10-08 12:16:00 -0400", "snippet": "Havoc C2 Framework DemoHello, I just wanted to demo the newly released Havoc framework. I didnt mention in the video but I find it very funny he named the versions after the Anime Jojo’s Bizzare Adventure Stands. Sorry for the lack of content I recently got a new job and I also got sick for a bit but I should be back on track. Thank you for watching this." }, { "title": "Practical Malware Analysis Lab 1", "url": "/posts/Labs1/", "categories": "PracticalMalwareAnalysis", "tags": "Malware, Lab, PracticalMalwareAnalysis", "date": "2022-08-26 12:16:00 -0400", "snippet": "Practical Malware Analysis LabsHello I am just drawing attention to my github where I will be uploading all the labs I am doing in a book I recently purchased called Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software 1st Edition by Andrew Honig and Michael Sikorski. I have completed the first set of labs which was on PE headers mainly.Lab 1 WriteupWhere have I been?Hello! Its been a bit I meant to upload more but I recently got a job as a Security Analyst at ReliaQuest so I have been training for that job a lot and things have been a bit hectic(in a good way). Now that things are starting to slow down I have a little bit of time to do my malware analysis and will be doing more. Thank you for the patience." }, { "title": "Malware Analysis - STRrat", "url": "/posts/STRRat/", "categories": "MalwareAnalysis", "tags": "Malware, STRrat, Java, Javascript", "date": "2022-07-11 11:30:00 -0400", "snippet": "SummarySTRrat is a Java based attack that works by heavily obsefucating its code through allatori obefusacter. The interesting part about this malware is that it does not care whether Java is installed as it calls out to a file hosting website to install its own JRE to run. Many times this malware is attached to JS, PDFs, MSI files or office documents. The payloads can vary greatly but at its core it is a jar. This malware can keylog, remote login, and steal credentials. One trivial thing it does is pretend to be ransomware despite not being capable of encyrpting files on its own.The way that I received this sample was from a friend who is part of the security club at my school who downloaded it off of MalwareBalzaar. The way this sample was found was through a phising attachment to an email called Payment AfvHeqhlhh_PFD.js. Many times this malware is attached to JS, PDFs, MSI files or office documents.Tools Used QEMU/KVM Autoruns Procmon Remnux NodeJS Base64 decoder Java Decompiler Java Deobfuescater GUIBehavior/Dynamic AnalysisThe first thing I did with this piece of malware was set up a Windows 10 VM and install tools needed to analyze changes in the system. When I ran the code I noticed two Command Prompts launch very briefly and disappear. The system seemed to run fine after that with no real effect to the performance(Note this was in a VM so this may be different on bare metal) When I checked Autoruns I observed that multiple registry keys had been changed to run javascript files with random names. These files were just copies of the first payloads stores in Autostart up as well as many other places. Process Hacker revealed that wsscript was reaching out to a remote address that is revealed to be a non logging vpn service.Payload 1The first payload is a heavily obfuscated javascript file. Putting this through a JavaScript beautifier we can observe that this file is being used for creating windows wscript references. Another important thing to note is that it uses Eval statements which is very common in javascript malware because eval gives a lot of extra data which is good to obfuscate its other payloads. Noticing this we can replace those eval() statements with console.log so that Nodes can print the variables. After doing this we run the code in Node JS, and we are given a huge base64 string. Once decoded this in a Base64 decoder we find the second payload.Payload 2The second payload is a lot easier to read as it has not been obfuscated at all.The first thing we notice is how the copy of he first payload is saved to the Roaming directory from a base64 encoded string. The next interesting thing we see is a second string but this one cannot be decoded as easily and is a lot more difficult to understand. Scrolling down further we find a condition that checks if JRE is installed and if it isn’t to download it from a file hosting site that has since been taken down. If JRE is present it runs a text file in the Roaming directory as a jar. This is of note because earlier we saw this directory having a text document saved to it. If we go into this directory we find multiple text documents. If we try to open them in Notepad we see they have PKZIP headers which means they are some sort of archive. These txt documents can be saved as jars and then decompiled in our Java Decomplier to find the final payload of this malware. Payload 3The third and final payload of this malware is the actual STRrat code itself. The most consistent thing I have seen across all versions of this malware I have seen is the fact that its part of a package called carLambo. When decomplied we see the collection of classes as well as a resource folder which contains a file named config.txt. When we open this txt file we can see it is written in base64 and when decoded it becomes illegible. Luckily for us there is a tool written by Jai Minton which uses a python script to decrypt the config file for STRrat. This reveals to us the two C2 servers used as well as the domains the malware downloads its plugins from. The final thing it reveals is how many levels of persistence it keeps such as scheduled tasks. Now that we have found the source of the C2 server we can finally dig into the code. The first thing I noticed was a main java file. In this file we can see it fetching all of the certain plugins it will need such as SQL and JNA. One very intresting file we can see is the malware setting up a scheduled task titled Skype to fly under the radar. If we go and look at other.java files we can see in cbnfdhn.java a way of setting up a server on our local host to pass any passwords saved as well as keystrokes recorded by a keylogger. Another interesting function we see is an encryption function which makes sense because this particular malware has been know to have a fake ransomware module. The next interesting file we find is fhfhjfg.java which is a keylogger. It grabs keys pressed and passes it off to other files to parse. After this file we move onto gmgmgmgm.java which is a very short file but has a very important string. We see it has the message “Initializing HRDP”. After some research we can find the HRDP is used for remote desktopping into computers. This means that with this malware installed someone could take control of the computer it is installed on. So the modules we have found in these java files indicate that this malware steals credentials, makes a command and control, logs keystrokes(keylogger) and is a fake ransomware.ConclusionSTRrat has been a persistent problem for a few years now and seems to have new campaigns every year. A good way to prevent being infected by STRrat is to always check to make sure every email you get isn’t fishy. The main way STRrat propagates is through phising emails. Another way to prevent is to keep your Windows Defender updated. While I was analyzing this malware Windows Defender tried deleting it multiple times despite the malware being young when I first started. If you are a sysadmin or anyone who analyzes networks it is best to make sure you have some kind of beaconing in place to see if any computers are calling out to weird domains. STRrat seems to call out to many strange domains which is a great IOC. Another way is to maybe block things like JRE on computers if your org doesn’t require any java applications.Notes from AuthorThank you for reading my very first malware analysis. I had a lot of fun making this and Im sure from professional perspective its very mediocre but I had a lot of fun making and am very eager to learn more about this specialization. Thank you! -Thomas" }, { "title": "Hello World", "url": "/posts/HelloWorld/", "categories": "Misc", "tags": "Misc", "date": "2022-05-24 20:30:00 -0400", "snippet": "Hello World!" } ]
